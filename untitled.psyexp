<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.2.1">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="Thank you for your patience." valType="str" updates="None" name="End Message"/>
    <Param val="{'participant':'f&quot;{randint(0, 999999):06.0f}&quot;', 'session':'001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="warning" valType="code" updates="None" name="consoleLoggingLevel"/>
    <Param val="default" valType="str" updates="None" name="ecSampleRate"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="untitled" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="info" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="MIDDLE_BUTTON" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="0" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="p1">
      <RoutineSettingsComponent name="p1" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="p1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import serial&amp;#10;&amp;#10;port = serial.Serial(&quot;/dev/ttyUSB0&quot;, baudrate=115200)&amp;#10;trigger = int(10)&amp;#10;&amp;#10;first = 1&amp;#10;second = 2&amp;#10;&amp;#10;win0 = visual.Window(size=(1920, 1080), screen=first, fullscr=True)&amp;#10;win0.checkTiming=False&amp;#10;win1 = visual.Window(size=(1920, 1080), screen=second, fullscr=True)&amp;#10;win1.checkTiming=False&amp;#10;&amp;#10;kb0 = hardware.keyboard.Keyboard(deviceName=&quot;kb0&quot;, device=0)&amp;#10;kb1 = hardware.keyboard.Keyboard(deviceName=&quot;kb1&quot;, device=second)&amp;#10;2&amp;#10;active_txt = visual.TextStim(win0, text='Close your eyes and1 press the space bar at the same time.\n' + &amp;#10;'Count to 10  in your head, and then open your eyes release the spacebar')&amp;#10;wait_txt = visual.TextStim(win1, text='The other player is about to close his eyes')&amp;#10;polygon = visual.Polygon(win0, pos = (-0.8, 0.8), size = 1.5, edges=4)&amp;#10;polygon_waiting = visual.Polygon(win1, pos = (-0.8, 0.8), size = 1.5, edges=4)&amp;#10;&amp;#10;win0.flip()&amp;#10;win1.flip()&amp;#10;&amp;#10;import random&amp;#10;is_left = random.choice([False, True])" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as serial from 'serial';&amp;#10;import * as random from 'random';&amp;#10;port = new serial.Serial(&quot;/dev/ttyUSB0&quot;, {&quot;baudrate&quot;: 115200});&amp;#10;trigger = Number.parseInt(10);&amp;#10;first = 1;&amp;#10;second = 2;&amp;#10;win0 = new visual.Window({&quot;size&quot;: [1920, 1080], &quot;screen&quot;: first, &quot;fullscr&quot;: true});&amp;#10;win0.checkTiming = false;&amp;#10;win1 = new visual.Window({&quot;size&quot;: [1920, 1080], &quot;screen&quot;: second, &quot;fullscr&quot;: true});&amp;#10;win1.checkTiming = false;&amp;#10;kb0 = new hardware.keyboard.Keyboard({&quot;deviceName&quot;: &quot;kb0&quot;, &quot;device&quot;: 0});&amp;#10;kb1 = new hardware.keyboard.Keyboard({&quot;deviceName&quot;: &quot;kb1&quot;, &quot;device&quot;: second});&amp;#10;2;&amp;#10;active_txt = new visual.TextStim(win0, {&quot;text&quot;: (&quot;Close your eyes and1 press the space bar at the same time.\n&quot; + &quot;Count to 10  in your head, and then open your eyes release the spacebar&quot;)});&amp;#10;wait_txt = new visual.TextStim(win1, {&quot;text&quot;: &quot;The other player is about to close his eyes&quot;});&amp;#10;polygon = new visual.Polygon(win0, {&quot;pos&quot;: [(- 0.8), 0.8], &quot;size&quot;: 1.5, &quot;edges&quot;: 4});&amp;#10;polygon_waiting = new visual.Polygon(win1, {&quot;pos&quot;: [(- 0.8), 0.8], &quot;size&quot;: 1.5, &quot;edges&quot;: 4});&amp;#10;win0.flip();&amp;#10;win1.flip();&amp;#10;is_left = Math.random.choice([false, true]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="wait_txt.setText(&quot;The other player is about to close his eyes&quot;);&amp;#10;if (is_left) {&amp;#10;    kb0.waitKeys({&quot;keyList&quot;: [&quot;space&quot;]});&amp;#10;    active_txt.win = win0;&amp;#10;    wait_txt.win = win1;&amp;#10;    polygon.win = win0;&amp;#10;    polygon_waiting.win = win1;&amp;#10;} else {&amp;#10;    kb1.waitKeys({&quot;keyList&quot;: [&quot;space&quot;]});&amp;#10;    active_txt.win = win1;&amp;#10;    wait_txt.win = win0;&amp;#10;    polygon.win = win1;&amp;#10;    polygon_waiting.win = win0;&amp;#10;}&amp;#10;wait_txt.setAutoDraw(true);&amp;#10;active_txt.setAutoDraw(true);&amp;#10;polygon.setAutoDraw(false);&amp;#10;polygon_waiting.setAutoDraw(false);&amp;#10;win0.flip();&amp;#10;win1.flip();&amp;#10;clicked = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="wait_txt.setText('The other player is about to close his eyes')&amp;#10;&amp;#10;if is_left:&amp;#10;    kb0.waitKeys(keyList=['space'])&amp;#10;    active_txt.win = win0&amp;#10;    wait_txt.win = win1&amp;#10;    polygon.win = win0&amp;#10;    polygon_waiting.win=win1&amp;#10;else:&amp;#10;    kb1.waitKeys(keyList=['space'])&amp;#10;    active_txt.win = win1&amp;#10;    wait_txt.win = win0&amp;#10;    polygon.win = win1&amp;#10;    polygon_waiting.win=win0&amp;#10;    &amp;#10;wait_txt.setAutoDraw(True)&amp;#10;active_txt.setAutoDraw(True)&amp;#10;polygon.setAutoDraw(False)&amp;#10;polygon_waiting.setAutoDraw(False)&amp;#10;win0.flip()&amp;#10;win1.flip()&amp;#10;clicked = False&amp;#10;                            " valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if is_left: &amp;#10;    hold_keys = kb0.getKeys(waitRelease = False)&amp;#10;    press_keys = kb0.getKeys(waitRelease = True)&amp;#10;else:&amp;#10;    hold_keys = kb1.getKeys(waitRelease = False)&amp;#10;    press_keys = kb1.getKeys(waitRelease = True)&amp;#10;&amp;#10;print(hold_keys)&amp;#10;print(press_keys)&amp;#10;&amp;#10;if press_keys:&amp;#10;    print(&quot;finish&quot;)&amp;#10;    continueRoutine = False&amp;#10;&amp;#10;if  not clicked and hold_keys:&amp;#10;    print(&quot;clicked&quot;)&amp;#10;    port.write(trigger.to_bytes(1, 'big'))&amp;#10;    clicked = True&amp;#10;    polygon.draw()&amp;#10;    polygon_waiting.draw()&amp;#10;    wait_txt.setText('The other player closed his eyes')&amp;#10;    win0.flip()&amp;#10;    win1.flip()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (is_left) {&amp;#10;    hold_keys = kb0.getKeys({&quot;waitRelease&quot;: false});&amp;#10;    press_keys = kb0.getKeys({&quot;waitRelease&quot;: true});&amp;#10;} else {&amp;#10;    hold_keys = kb1.getKeys({&quot;waitRelease&quot;: false});&amp;#10;    press_keys = kb1.getKeys({&quot;waitRelease&quot;: true});&amp;#10;}&amp;#10;console.log(hold_keys);&amp;#10;console.log(press_keys);&amp;#10;if (press_keys) {&amp;#10;    console.log(&quot;finish&quot;);&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;if (((! clicked) &amp;&amp; hold_keys)) {&amp;#10;    console.log(&quot;clicked&quot;);&amp;#10;    port.write(trigger.to_bytes(1, &quot;big&quot;));&amp;#10;    clicked = true;&amp;#10;    polygon.draw();&amp;#10;    polygon_waiting.draw();&amp;#10;    wait_txt.setText(&quot;The other player closed his eyes&quot;);&amp;#10;    win0.flip();&amp;#10;    win1.flip();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="console.log(&quot;end&quot;);&amp;#10;active_txt.setAutoDraw(false);&amp;#10;wait_txt.setAutoDraw(false);&amp;#10;polygon.setAutoDraw(false);&amp;#10;win0.flip();&amp;#10;win1.flip();&amp;#10;is_left = (! is_left);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="print(&quot;end&quot;)&amp;#10;active_txt.setAutoDraw(False)&amp;#10;wait_txt.setAutoDraw(False)&amp;#10;polygon.setAutoDraw(False)&amp;#10;&amp;#10;win0.flip()&amp;#10;win1.flip()&amp;#10;&amp;#10;is_left = not is_left" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="p2">
      <RoutineSettingsComponent name="p2" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="p2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
    </Routine>
  </Routines>
  <Flow>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="50" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="p1"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
