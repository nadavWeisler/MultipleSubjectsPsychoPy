<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.2.4">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="Thank you for your patience." valType="str" updates="None" name="End Message"/>
    <Param val="{'participant':'f&quot;{randint(0, 999999):06.0f}&quot;', 'session':'001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="warning" valType="code" updates="None" name="consoleLoggingLevel"/>
    <Param val="default" valType="str" updates="None" name="ecSampleRate"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="untitled" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="info" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="MIDDLE_BUTTON" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="0" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="p1">
      <RoutineSettingsComponent name="p1" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="p1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code" plugin="None">
        <Param val="from inputs import devices, get_key&amp;#10;&amp;#10;def list_keyboards():&amp;#10;    &quot;&quot;&quot;List all input devices and filter for keyboards.&quot;&quot;&quot;&amp;#10;    print(&quot;Available input devices (keyboards):&quot;)&amp;#10;    keyboards = [device for device in devices if &quot;keyboard&quot; in device.name.lower()]&amp;#10;    for idx, keyboard in enumerate(keyboards):&amp;#10;        print(f&quot;{idx}: {keyboard.name} (path: {keyboard})&quot;)&amp;#10;    return keyboards&amp;#10;&amp;#10;list_keyboards()&amp;#10;&amp;#10;def listen_to_keyboard(kb):&amp;#10;    &quot;&quot;&quot;Listen for key presses from a specific keyboard device.&quot;&quot;&quot;&amp;#10;    print(f&quot;Listening to keyboard: {keyboard.name} (path: {keyboard.fn})&quot;)&amp;#10;    try:&amp;#10;            events = kb.read()  # Read events from the specific device&amp;#10;            for event in events:&amp;#10;                if event.ev_type == &quot;Key&quot; and event.state == 1:&amp;#10;                    print(f&quot;Key pressed from {keyboard.name}: {event.code}&quot;)&amp;#10;    except KeyboardInterrupt:&amp;#10;        print(&quot;\nExiting...&quot;)" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import serial&amp;#10;&amp;#10;port = serial.Serial(&quot;/dev/ttyUSB0&quot;, baudrate=115200)&amp;#10;trigger_0 = int(10)&amp;#10;trigger_1 = int(11)&amp;#10;&amp;#10;win0 = visual.Window(size=(1920, 1080), screen=1, fullscr=True)&amp;#10;win0.checkTiming=False&amp;#10;win1 = visual.Window(size=(1920, 1080), screen=2, fullscr=True)&amp;#10;win1.checkTiming=False&amp;#10;&amp;#10;active_txt_0 = visual.TextStim(win0, text='Close your eyes and press the &quot;a&quot; button at the same time.\n' + &amp;#10;'Count to 10  in your head, and then open your eyes release the &quot;a&quot; button')&amp;#10;active_txt_1 = visual.TextStim(win1, text='Close your eyes and press the &quot;l&quot; button at the same time.\n' + &amp;#10;'Count to 10  in your head, and then open your eyes release the &quot;l&quot; button')&amp;#10;wait_txt = visual.TextStim(win1, text='The other player is about to close his eyes')&amp;#10;polygon_on = visual.Polygon(win0, pos = (0.8, 0.8), size = 1, edges=5, color=&quot;white&quot;)&amp;#10;polygon_off = visual.Polygon(win0, pos = (0.8, 0.8), size = 1, edges=5, color=&quot;black&quot;)&amp;#10;&amp;#10;win0.flip()&amp;#10;win1.flip()&amp;#10;&amp;#10;import random&amp;#10;is_left = random.choice([False, True])" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as serial from 'serial';&amp;#10;import * as random from 'random';&amp;#10;port = new serial.Serial(&quot;/dev/ttyUSB0&quot;, {&quot;baudrate&quot;: 115200});&amp;#10;trigger_0 = Number.parseInt(10);&amp;#10;trigger_1 = Number.parseInt(11);&amp;#10;win0 = new visual.Window({&quot;size&quot;: [1920, 1080], &quot;screen&quot;: 1, &quot;fullscr&quot;: true});&amp;#10;win0.checkTiming = false;&amp;#10;win1 = new visual.Window({&quot;size&quot;: [1920, 1080], &quot;screen&quot;: 2, &quot;fullscr&quot;: true});&amp;#10;win1.checkTiming = false;&amp;#10;active_txt_0 = new visual.TextStim(win0, {&quot;text&quot;: (&quot;Close your eyes and press the \&quot;a\&quot; button at the same time.\n&quot; + &quot;Count to 10  in your head, and then open your eyes release the \&quot;a\&quot; button&quot;)});&amp;#10;active_txt_1 = new visual.TextStim(win1, {&quot;text&quot;: (&quot;Close your eyes and press the \&quot;l\&quot; button at the same time.\n&quot; + &quot;Count to 10  in your head, and then open your eyes release the \&quot;l\&quot; button&quot;)});&amp;#10;wait_txt = new visual.TextStim(win1, {&quot;text&quot;: &quot;The other player is about to close his eyes&quot;});&amp;#10;polygon_on = new visual.Polygon(win0, {&quot;pos&quot;: [0.8, 0.8], &quot;size&quot;: 1, &quot;edges&quot;: 5, &quot;color&quot;: &quot;white&quot;});&amp;#10;polygon_off = new visual.Polygon(win0, {&quot;pos&quot;: [0.8, 0.8], &quot;size&quot;: 1, &quot;edges&quot;: 5, &quot;color&quot;: &quot;black&quot;});&amp;#10;win0.flip();&amp;#10;win1.flip();&amp;#10;is_left = Math.random.choice([false, true]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="wait_txt.setText(&quot;The other player is about to close his eyes&quot;);&amp;#10;if (is_left) {&amp;#10;    active_txt_0.setAutoDraw(true);&amp;#10;    wait_txt.win = win1;&amp;#10;    polygon_on.win = win0;&amp;#10;    polygon_off.win = win1;&amp;#10;} else {&amp;#10;    active_txt_1.setAutoDraw(true);&amp;#10;    wait_txt.win = win0;&amp;#10;    polygon_on.win = win1;&amp;#10;    polygon_off.win = win0;&amp;#10;}&amp;#10;wait_txt.setAutoDraw(true);&amp;#10;win0.flip();&amp;#10;win1.flip();&amp;#10;clicked = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="wait_txt.setText('The other player is about to close his eyes')&amp;#10;&amp;#10;if is_left:&amp;#10;    active_txt_0.setAutoDraw(True)&amp;#10;    wait_txt.win = win1&amp;#10;    polygon_on.win = win0&amp;#10;    polygon_off.win = win1&amp;#10;else:&amp;#10;    active_txt_1.setAutoDraw(True)&amp;#10;    wait_txt.win = win0&amp;#10;    polygon_on.win = win1&amp;#10;    polygon_off.win = win0&amp;#10;    &amp;#10;wait_txt.setAutoDraw(True)&amp;#10;win0.flip()&amp;#10;win1.flip()&amp;#10;clicked = False&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if  not clicked and key_resp_2.keys in ['a', 'l']:&amp;#10;    if is_left:&amp;#10;        port.write(trigger_0.to_bytes(1, 'big'))&amp;#10;    else:&amp;#10;        port.write(trigger_1.to_bytes(1, 'big'))&amp;#10;    clicked = True&amp;#10;    polygon_on.setAutoDraw(True)&amp;#10;    polygon_off.setAutoDraw(True)&amp;#10;    wait_txt.setText('The other player closed his eyes')&amp;#10;    win0.flip()&amp;#10;    win1.flip()&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if (((! clicked) &amp;&amp; _pj.in_es6(key_resp_2.keys, [&quot;a&quot;, &quot;l&quot;]))) {&amp;#10;    if (is_left) {&amp;#10;        port.write(trigger_0.to_bytes(1, &quot;big&quot;));&amp;#10;    } else {&amp;#10;        port.write(trigger_1.to_bytes(1, &quot;big&quot;));&amp;#10;    }&amp;#10;    clicked = true;&amp;#10;    polygon_on.setAutoDraw(true);&amp;#10;    polygon_off.setAutoDraw(true);&amp;#10;    wait_txt.setText(&quot;The other player closed his eyes&quot;);&amp;#10;    win0.flip();&amp;#10;    win1.flip();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="active_txt_0.setAutoDraw(false);&amp;#10;active_txt_1.setAutoDraw(false);&amp;#10;wait_txt.setAutoDraw(false);&amp;#10;polygon_on.setAutoDraw(false);&amp;#10;polygon_off.setAutoDraw(false);&amp;#10;win0.flip();&amp;#10;win1.flip();&amp;#10;is_left = (! is_left);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="active_txt_0.setAutoDraw(False)&amp;#10;active_txt_1.setAutoDraw(False)&amp;#10;&amp;#10;wait_txt.setAutoDraw(False)&amp;#10;&amp;#10;polygon_on.setAutoDraw(False)&amp;#10;polygon_off.setAutoDraw(False)&amp;#10;&amp;#10;win0.flip()&amp;#10;win1.flip()&amp;#10;&amp;#10;is_left = not is_left" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp" plugin="None">
        <Param val="'a', 'l'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="release" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <KeyboardComponent name="key_resp_2" plugin="None">
        <Param val="'a', 'l'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_2" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="start">
      <RoutineSettingsComponent name="start" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="start" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <KeyboardComponent name="key_resp_3" plugin="None">
        <Param val="'q'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_3" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="pre">
      <RoutineSettingsComponent name="pre" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="pre" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="pre_code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from psychtoolbox import hid" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {hid} from 'psychtoolbox';&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="import * as serial from 'serial';&amp;#10;import * as random from 'random';&amp;#10;bufferSize = 10000;&amp;#10;port = new serial.Serial(&quot;/dev/ttyUSB0&quot;, {&quot;baudrate&quot;: 115200});&amp;#10;trigger_0 = Number.parseInt(10);&amp;#10;trigger_1 = Number.parseInt(11);&amp;#10;win0 = new visual.Window({&quot;size&quot;: [1920, 1080], &quot;screen&quot;: 0, &quot;fullscr&quot;: true});&amp;#10;win0.checkTiming = false;&amp;#10;win1 = new visual.Window({&quot;size&quot;: [1920, 1080], &quot;screen&quot;: 2, &quot;fullscr&quot;: true});&amp;#10;win1.checkTiming = false;&amp;#10;wait_txt = new visual.TextStim(win0, {&quot;text&quot;: &quot;The other player is about to close his eyes&quot;});&amp;#10;fixation_txt = new visual.TextStim(win0, {&quot;text&quot;: &quot;+&quot;});&amp;#10;ask_txt = new visual.TextStim(win0, {&quot;text&quot;: &quot;Press any key&quot;});&amp;#10;word_txt = new visual.TextStim(win0, {&quot;text&quot;: &quot;hello&quot;});&amp;#10;current_word = &quot;hello&quot;;&amp;#10;win0.flip();&amp;#10;win1.flip();&amp;#10;is_left = Math.random.choice([false, true]);&amp;#10;dev_nums = [3, 4, 5, 6, 7, 8, 10, 15, 17, 18, 19, 20];&amp;#10;devs = {[3]: new hid.Keyboard(3), [4]: new hid.Keyboard(4), [5]: new hid.Keyboard(5), [6]: new hid.Keyboard(6), [7]: new hid.Keyboard(7), [8]: new hid.Keyboard(8), [10]: new hid.Keyboard(10), [15]: new hid.Keyboard(15), [17]: new hid.Keyboard(17), [18]: new hid.Keyboard(18), [19]: new hid.Keyboard(19), [20]: new hid.Keyboard(20)};&amp;#10;for (var num, _pj_c = 0, _pj_a = dev_nums, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    num = _pj_a[_pj_c];&amp;#10;    devs[num]._create_queue(bufferSize, {&quot;win_handle&quot;: null});&amp;#10;    devs[num].queue_start();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="import serial&amp;#10;&amp;#10;bufferSize = 10000&amp;#10;port = serial.Serial(&quot;/dev/ttyUSB0&quot;, baudrate=115200)&amp;#10;trigger_0 = int(10)&amp;#10;trigger_1 = int(11)&amp;#10;&amp;#10;win0 = visual.Window(size=(1920, 1080), &amp;#10;    screen=0, &amp;#10;    fullscr=True)&amp;#10;win0.checkTiming=False&amp;#10;win1 = visual.Window(size=(1920, 1080), &amp;#10;    screen=2, &amp;#10;    fullscr=True)&amp;#10;win1.checkTiming=False&amp;#10;&amp;#10;wait_txt = visual.TextStim(win0, text='The other player is about to close his eyes')&amp;#10;fixation_txt = visual.TextStim(win0, text='+')&amp;#10;ask_txt = visual.TextStim(win0, text=&quot;Press any key&quot;)&amp;#10;word_txt = visual.TextStim(win0, text='hello')&amp;#10;current_word = &quot;hello&quot;&amp;#10;&amp;#10;win0.flip()&amp;#10;win1.flip()&amp;#10;&amp;#10;import random&amp;#10;is_left = random.choice([False, True])&amp;#10;&amp;#10;dev_nums = [3,4,5,6,7,8,10, 15, 17, 18, 19, 20]&amp;#10;devs = {&amp;#10;    3: hid.Keyboard(3),&amp;#10;    4: hid.Keyboard(4),&amp;#10;    5: hid.Keyboard(5),&amp;#10;    6: hid.Keyboard(6), &amp;#10;    7: hid.Keyboard(7),&amp;#10;    8: hid.Keyboard(8),&amp;#10;    10: hid.Keyboard(10),&amp;#10;    15: hid.Keyboard(15),&amp;#10;    17: hid.Keyboard(17), &amp;#10;    18: hid.Keyboard(18),&amp;#10;    19: hid.Keyboard(19),&amp;#10;    20: hid.Keyboard(20)&amp;#10;}&amp;#10;&amp;#10;for num in dev_nums:&amp;#10;    devs[num]._create_queue(bufferSize, win_handle=None)&amp;#10;    devs[num].queue_start()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="pre_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="fixation">
      <RoutineSettingsComponent name="fixation" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="fixation" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="fixation_code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if (is_left) {&amp;#10;    wait_txt.win = win1;&amp;#10;    fixation_txt.win = win0;&amp;#10;} else {&amp;#10;    wait_txt.win = win0;&amp;#10;    fixation_txt.win = win1;&amp;#10;}&amp;#10;fixation_txt.setAutoDraw(true);&amp;#10;wait_txt.setAutoDraw(true);&amp;#10;win0.flip();&amp;#10;win1.flip();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if is_left:&amp;#10;    wait_txt.win = win1&amp;#10;    fixation_txt.win = win0&amp;#10;else:&amp;#10;    wait_txt.win = win0&amp;#10;    fixation_txt.win = win1&amp;#10;    &amp;#10;fixation_txt.setAutoDraw(True)&amp;#10;wait_txt.setAutoDraw(True)&amp;#10;    &amp;#10;win0.flip()&amp;#10;win1.flip()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="fixation_txt.setAutoDraw(false);&amp;#10;wait_txt.setAutoDraw(false);&amp;#10;win0.flip();&amp;#10;win1.flip();&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="fixation_txt.setAutoDraw(False)&amp;#10;wait_txt.setAutoDraw(False)&amp;#10;&amp;#10;win0.flip()&amp;#10;win1.flip()" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="fixation_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="word">
      <RoutineSettingsComponent name="word" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="word" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_word" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="word_txt.setText(current_word);&amp;#10;if (is_left) {&amp;#10;    wait_txt.win = win1;&amp;#10;    word_txt.win = win0;&amp;#10;} else {&amp;#10;    wait_txt.win = win0;&amp;#10;    word_txt.win = win1;&amp;#10;}&amp;#10;word_txt.setAutoDraw(true);&amp;#10;wait_txt.setAutoDraw(true);&amp;#10;win0.flip();&amp;#10;win1.flip();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="word_txt.setText(current_word)&amp;#10;if is_left:&amp;#10;    wait_txt.win = win1&amp;#10;    word_txt.win = win0&amp;#10;else:&amp;#10;    wait_txt.win = win0&amp;#10;    word_txt.win = win1&amp;#10;&amp;#10;word_txt.setAutoDraw(True)&amp;#10;wait_txt.setAutoDraw(True)&amp;#10;&amp;#10;win0.flip()&amp;#10;win1.flip()&amp;#10;&amp;#10;&amp;#10;&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="i = 0&amp;#10;for dev in devs:&amp;#10;    if dev.flush(1):&amp;#10;        print(num[i])&amp;#10;    i += 1&amp;#10;     &amp;#10;if is_left:&amp;#10;    current_dev = dev10&amp;#10;else:&amp;#10;    current_dev = dev14&amp;#10;&amp;#10;if is_left:&amp;#10;    while dev10.flush(1):&amp;#10;        evt, remaining = dev.queue_get_event()&amp;#10;        pressed = bool(evt[&quot;Pressed&quot;])&amp;#10;        keycode = int(evt[&quot;Keycode&quot;])&amp;#10;        if (not pressed) and (keycode == 66):&amp;#10;            continueRoutine = False&amp;#10;    " valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="i = 0;&amp;#10;for (var dev, _pj_c = 0, _pj_a = devs, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    dev = _pj_a[_pj_c];&amp;#10;    if (dev.flush(1)) {&amp;#10;        console.log(num[i]);&amp;#10;    }&amp;#10;    i += 1;&amp;#10;}&amp;#10;if (is_left) {&amp;#10;    current_dev = dev10;&amp;#10;} else {&amp;#10;    current_dev = dev14;&amp;#10;}&amp;#10;if (is_left) {&amp;#10;    while (dev10.flush(1)) {&amp;#10;        [evt, remaining] = dev.queue_get_event();&amp;#10;        pressed = bool(evt[&quot;Pressed&quot;]);&amp;#10;        keycode = Number.parseInt(evt[&quot;Keycode&quot;]);&amp;#10;        if (((! pressed) &amp;&amp; (keycode === 66))) {&amp;#10;            continueRoutine = false;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="word_txt.setAutoDraw(false);&amp;#10;wait_txt.setAutoDraw(false);&amp;#10;win0.flip();&amp;#10;win1.flip();&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="word_txt.setAutoDraw(False)&amp;#10;wait_txt.setAutoDraw(False)&amp;#10;&amp;#10;win0.flip()&amp;#10;win1.flip()" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_word" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_2" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="word_keyboard" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="word_keyboard" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="trial_end">
      <RoutineSettingsComponent name="trial_end" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="trial_end" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_3" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="is_left = (! is_left);&amp;#10;win0.flip();&amp;#10;win1.flip();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="is_left = not is_left&amp;#10;&amp;#10;win0.flip()&amp;#10;win1.flip()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="sync_kb_1">
      <RoutineSettingsComponent name="sync_kb_1" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="sync_kb_1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="sync_kb_1_code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if (is_left) {&amp;#10;    wait_txt.win = win1;&amp;#10;    ask_txt.win = win0;&amp;#10;} else {&amp;#10;    wait_txt.win = win0;&amp;#10;    ask_txt.win = win1;&amp;#10;}&amp;#10;ask_txt.setAutoDraw(true);&amp;#10;wait_txt.setAutoDraw(true);&amp;#10;p1_kb = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if is_left:&amp;#10;    wait_txt.win = win1&amp;#10;    ask_txt.win = win0&amp;#10;else:&amp;#10;    wait_txt.win = win0&amp;#10;    ask_txt.win = win1&amp;#10;    &amp;#10;ask_txt.setAutoDraw(True)&amp;#10;wait_txt.setAutoDraw(True)&amp;#10;&amp;#10;p1_kb = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="for num in dev_nums:&amp;#10;    while devs[num].flush(1):&amp;#10;        p1_kb = num&amp;#10;    if p1_kb &gt; 0:&amp;#10;        continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="for (var num, _pj_c = 0, _pj_a = dev_nums, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    num = _pj_a[_pj_c];&amp;#10;    while (devs[num].flush(1)) {&amp;#10;        p1_kb = num;&amp;#10;    }&amp;#10;    if ((p1_kb &gt; 0)) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="sync_kb_1_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_4" plugin="None">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_4" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="sync_kb_2">
      <RoutineSettingsComponent name="sync_kb_2" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="sync_kb_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="pre"/>
    <Routine name="sync_kb_1"/>
    <Routine name="sync_kb_2"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="5" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="fixation"/>
    <Routine name="word"/>
    <Routine name="p1"/>
    <Routine name="trial_end"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
